#version 450

layout(binding = 0) uniform Input {
    uint samplesPerGroup;
    uint groupsPerAxis;
} inputBuffer;

layout(binding = 1) buffer writeonly Output {
    uint positiveSamples;
    uint totalSamples;
} outputBuffer;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main() {
    uint positiveSamples = 0;

    for (uint x = 0; x < inputBuffer.samplesPerGroup; x++) {
        for (uint y = 0; y < inputBuffer.samplesPerGroup; y++) {
            const vec2 offset = vec2(x, y) / inputBuffer.samplesPerGroup;
            vec2 pos = (gl_GlobalInvocationID.xy + offset) / (inputBuffer.groupsPerAxis * 16);

            if (pos.x * pos.x + pos.y * pos.y <= 1) {
                positiveSamples++;
            }
        }
    }

    atomicAdd(outputBuffer.totalSamples, inputBuffer.samplesPerGroup * inputBuffer.samplesPerGroup);
    atomicAdd(outputBuffer.positiveSamples, positiveSamples);
}
